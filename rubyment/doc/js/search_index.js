var search_data = {"index":{"searchIndex":["rubyment","file_backup()","filepath_or_contents()","input_non_empty_filepath_or_contents_or_multiline_prompt()","input_non_empty_string_or_multiline_prompt()","input_shift()","input_shift_or_empty_string()","main()","new()","rest_request()","save_file()","string_in_columns()","test__()","url_to_str()"],"longSearchIndex":["rubyment","rubyment#file_backup()","rubyment#filepath_or_contents()","rubyment#input_non_empty_filepath_or_contents_or_multiline_prompt()","rubyment#input_non_empty_string_or_multiline_prompt()","rubyment#input_shift()","rubyment#input_shift_or_empty_string()","rubyment#main()","rubyment::new()","rubyment#rest_request()","rubyment#save_file()","rubyment#string_in_columns()","rubyment#test__()","rubyment#url_to_str()"],"info":[["Rubyment","","Rubyment.html","","<p>Collection of Ruby functions\n<p>output\n\n<p>normally outputs to STDERR, with no mercy STDOUT, just qualified output: …\n"],["file_backup","Rubyment","Rubyment.html#method-i-file_backup","(file = __FILE__ , dir = '/tmp/', append = ('-' + Time.now.hash.abs.to_s), prepend='/')","<p>if file is a nonexisting filepath, or by any reason throws any exception,\nit will be treated as contents …\n"],["filepath_or_contents","Rubyment","Rubyment.html#method-i-filepath_or_contents","(file, contents = \"\")","<p>returns the contents of file (or empty, or a default if a second parameter\nis given). if file is a nonexisting …\n"],["input_non_empty_filepath_or_contents_or_multiline_prompt","Rubyment","Rubyment.html#method-i-input_non_empty_filepath_or_contents_or_multiline_prompt","(args=ARGV)",""],["input_non_empty_string_or_multiline_prompt","Rubyment","Rubyment.html#method-i-input_non_empty_string_or_multiline_prompt","(args=ARGV)","<p>returns the first value of args if it is a non empty string, or prompt.\nuseful for reading file contents, …\n"],["input_shift","Rubyment","Rubyment.html#method-i-input_shift","(args=ARGV)",""],["input_shift_or_empty_string","Rubyment","Rubyment.html#method-i-input_shift_or_empty_string","(args=ARGV, default = '')",""],["main","Rubyment","Rubyment.html#method-i-main","(args=ARGV)",""],["new","Rubyment","Rubyment.html#method-c-new","(memory = {})",""],["rest_request","Rubyment","Rubyment.html#method-i-rest_request","(args=ARGV)","<p>makes a rest request. todo: parameters\n"],["save_file","Rubyment","Rubyment.html#method-i-save_file","(url, location, wtime=0)","<p>save url contents to a local file location\n"],["string_in_columns","Rubyment","Rubyment.html#method-i-string_in_columns","(s, max_column=80)","<p>place a n at every max_column chars approximately (a word can be bigger\nthan max_column, and some other …\n"],["test__","Rubyment","Rubyment.html#method-i-test__","(args=ARGV)","<p>print arguments given\n"],["url_to_str","Rubyment","Rubyment.html#method-i-url_to_str","(url, rescue_value=nil)",""]]}}